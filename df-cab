#!/usr/bin/env ruby

require 'fileutils'

#############################################################################################################
# Options Parsing.
#############################################################################################################

BANNER = <<-eos

    dotfile-cabinet - responsibly manage your dotfiles with Dropbox
    =============================================================================
eos

BANNER_COMMANDS = <<-eos
    Commands                         Description
    -----------------------------------------------------------------------------
    link                             Symlink dotfiles and create backups
    list                             List dotfiles currently being tracked
    init                             Create the required directories
    purge                            Delete old backups 
    up_to_date                       Is your version of the script up-to-date?
    about                            More information
    
eos

# Print banner 
puts BANNER + BANNER_COMMANDS if ARGV[0].nil?

#############################################################################################################
# Helper Class.
#############################################################################################################

CURRENT_DIR           = File.expand_path('..', __FILE__)
DOTFILE_DIR           = File.join( CURRENT_DIR, 'dotfiles' )
DOTFILE_BACKUP_DIR    = File.join( CURRENT_DIR, 'dotfiles-backup' )
HOME_DIR              = ARGV[1] ? File.expand_path( ARGV[1] ) : File.expand_path( '~' )
EXEC_URL              = "https://raw.github.com/briangonzalez/dotfile-cabinet/master/df-cab"
NOW                   = "#{[Time.now.month, Time.now.day, Time.now.year ].join('-')}-at-#{[Time.now.hour,Time.now.min,Time.now.sec].join(".")}"

class  DotfileCabinet

  def link
    puts "[TASK: #{ARGV[0]}]\nSymlinking dotfiles to #{File.expand_path(HOME_DIR)}:\n\n"
    
    if dotfiles.empty?
      puts "* No files to link."
      puts "* '#{DOTFILE_DIR}' is empty."
      return
    end

    if all_linked?
      puts "* Nothing to link -- all dotfiles are already symlinked."
      return
    end

    # Create backup dir.
    FileUtils.mkdir DOTFILE_BACKUP_DIR
    
    dotfiles.each do |f| 

      if linked?(f)
        puts "[SKIP] '#{File.basename(f)}' already symlinked."
        next
      end

      # Ask for user input.
      ask     = lambda do
        puts
        puts "[QUESTION]\nSymlink '#{File.basename(f)}' to '#{HOME_DIR}/#{File.basename(f)}' and create backup if needed?"
        puts "[#{commands.join(', ')}]"
        b = STDIN.gets.chomp
        b
      end

      # Loop until we get an answer we understand.
      answer  = false
      while !answer
        begin
          answer = perform_link_action(ask.call, f)
        rescue SystemExit, Interrupt
          exit
        rescue Exception => e
          puts "[ERROR]\n " + e.message
          answer = true
        end
      end    
    end

    zip_up_backups

  end

  def init
    puts "[TASK: #{ARGV[0]}]\nCreating '#{DOTFILE_DIR}', if necessary..."
    FileUtils.mkdir DOTFILE_DIR           unless File.exists? DOTFILE_DIR
  end

  def list
    puts "[TASK: #{ARGV[0]}]\nShowing the following (#{dotfiles.length}) dotfiles, some may not be symlinked:\n"
    dotfiles.each_with_index.map do |f, index| 
      linked_verbiage = linked?(f) ? "☑ Symlinked:\t\t" : "☐ Not Symlinked:\t"
      puts linked_verbiage + File.basename(f)
    end
  end
  alias_method :ls, :list

  def purge
    puts "[TASK: #{ARGV[0]}]\nDeleting dotfile backups:\n"
    `rm -i dotfile-backup*.zip`
  end

  def integrity_check
    return true if ['init', 'about'].include? ARGV[0]

    if !(File.exists? DOTFILE_DIR)
      puts "Bad integrity. #{DOTFILE_DIR} missing? Exiting!"
      exit
    end
  end

  def up_to_date
    puts "[TASK: #{ARGV[0]}]\nChecking if you're executable is up-to-date:\n"

    file = "df-cab-latest"
    %x[curl -o #{file} #{EXEC_URL}]
    puts

    if FileUtils.compare_file('df-cab', file)
      puts "* df-cab is up-to-date!"
    else
      puts "* df-cab is NOT up-to-date!"
      puts "* Please run:"
      puts "  curl -o df-cab #{EXEC_URL}"
    end

    FileUtils.rm_rf(file)
  end

  def about
    puts BANNER
    puts "    More info on the web at: github.com/briangonzalez/dotfile-cabinet"
  end

  def zip_up_backups
    `zip dotfile-backup_#{NOW}.zip '#{DOTFILE_BACKUP_DIR}'`
    FileUtils.rm_rf DOTFILE_BACKUP_DIR
  end

  protected

  def dotfiles
    @dotfiles ||= Dir["#{DOTFILE_DIR}/.*"].reject do |f|
      ['.', '..', '.DS_Store'].include? File.basename(f)
    end

    @dotfiles.sort!{ |x,y| (linked?(y) ? 1 : -1) <=> (linked?(x) ? 1 : -1)  }

    @dotfiles
  end

  def all_linked?
    puts dotfiles.reject{ |f| linked?(f) }
    dotfiles.reject{ |f| linked?(f) }.empty?
  end

  def commands
    ['y', 'n', 'a']
  end

  def linked?(file)
    home_file = File.join(HOME_DIR, File.basename(file))
    File.symlink?(home_file)  and File.readlink(home_file) == file 
  end

  def perform_link_action(action, file)
    success = true

    case action
    when 'y'
      orig_dotfile = File.join(HOME_DIR, File.basename(file))

      FileUtils.mv( orig_dotfile, DOTFILE_BACKUP_DIR ) if File.exists?(orig_dotfile)
      FileUtils.symlink( file, HOME_DIR )
      
      puts "\n✓ Symlinked #{File.basename(file)} to #{HOME_DIR}.\n"
    when 'n'
      # Do nothing.
    when 'a'
      puts "Aborting."
      exit
    when ''
      puts "Please provide a command."
      return false
    else
      puts "Unknown command."
      return false
    end 

    success
  end

end

#############################################################################################################
# Run the commands.
#############################################################################################################

if ARGV[0]
  begin
    puts
    cb = DotfileCabinet.new
    cb.integrity_check
    cb.send( ARGV[0] )
    puts "\n[SUCCESS]\nCompleted: #{ARGV[0]}"
  rescue Exception => e
    cb.zip_up_backups
    puts "\n[ERROR]\n#{e.message}"
  end
end
